#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
import numpy as np
from markers import *
from lab6functions import *

if __name__ == '__main__':
    
 # Initialize the node
 rospy.init_node("testKineControlPose")
 print('starting motion ... ')
 # Publisher: publish to the joint_states topic
 pub = rospy.Publisher('/joint_states', JointState, queue_size=1000)
 
 fxcurrent = open("xcurrentW.txt", "w")                
 fxdesired = open("xdesiredW.txt", "w")
 
 # Markers for the current and desired positions
 bmarker_current  = FrameMarker()
 bmarker_desired = FrameMarker(0.5)
 
 # Joint names
 jnames = ("joint1","joint2","joint3", "joint4", "joint5","joint6", "joint7")
 
 # Desired pose
 ang = pi/3
 Rd = srotz(ang)
 qd = rot2quat(Rd)	
 print(qd)
 # Find an xd that the robot can reach
 xd = np.array([0.8, 0.5, 1.5, qd[0], qd[1], qd[2], qd[3]])
 #xd  = np.array([1, 1, 1, np.cos(ang/2.0), 0, 0, np.sin(ang/2.0)])
 #xd  = np.array([1, 1, 1, np.cos(ang/2.0), 0,np.sin(ang/	2.0),0])
 # Initial configuration
 q0  = np.array([-0.1, 0.1, 0.04, 0.00, -0.2, 0.1, 0])
 
 # Resulting initial pose (end effector with respect to the base link)
 T = fkine(q0)
 x0 = TF2xyzquat(T)
 
 # Markers for the current and the desired pose
 bmarker_current.setPose(x0)
 bmarker_desired.setPose(xd)
 
 # Instance of the JointState message
 jstate = JointState()
 # Values of the message
 jstate.header.stamp = rospy.Time.now()
 jstate.name = jnames
 # Add the head joint value (with value 0) to the joints
 jstate.position = q0
 
 # Frequency (in Hz) and control period 
 freq = 200
 dt = 1.0/freq
 rate = rospy.Rate(freq)
 
 # Initial joint configuration
 q = copy(q0)
 x = copy(x0)
 quat = x[3:7]
 k=1
 # Initialize the derror vector (derivative of the error)
 derror = np.zeros(7)
 # Main loop
 #for i in range(1):
 fxcurrent = open("/home/victor/lab_ws/src/frlabs/lab6/src/temp/xcurrent.txt", "w")                
 fxdesired = open("/home/victor/lab_ws/src/frlabs/lab6/src/temp/xdesired.txt", "w")
 t=0
 while not rospy.is_shutdown():
  
  # Current time (needed for ROS)
  jstate.header.stamp = rospy.Time.now()
  # Kinematic control law for the pose (complete here)
  # --------------------------------------------------
  T=fkine(q)
  x[0:3]=T[:3, 3];
  x[3:7]=rot2quat(T);
  e=x-xd;
  fxcurrent.write(str(t)+' '+str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
  fxdesired.write(str(t)+' '+str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
  J=jacobian_pose(q, delta=0.0001)
  t=t+dt;
  # Calcular los valores singulares
  U, S, Vt = np.linalg.svd(J)
  # Verificar el menor valor singular
  if np.isclose(S[-1], 0, atol=1e-6):  # Ajusta atol según tu tolerancia
   print("El Jacobiano es singular o está cerca de serlo.")
   eps=0.01
   J_inv = J.T @ np.linalg.inv(J @ J.T + eps**2*np.eye(7))
   qd=-J_inv*k @ e
   q = q+dt*qd      
   # Current configuration trnaformation to current position
   T = fkine(q)
   x = TF2xyzquat(T)
   # Publish the message
   jstate.position = q
   pub.publish(jstate)
   bmarker_desired.setPose(xd)
   bmarker_current.setPose(x)
  else:
   J_inv = np.linalg.pinv(J)
  
  qd=-J_inv*k @ e
  q = q+dt*qd      
  
  # Current configuration trnaformation to current position
  T = fkine(q)
  x = TF2xyzquat(T)
  # Publish the message
  jstate.position = q
  pub.publish(jstate)
  bmarker_desired.setPose(xd)
  bmarker_current.setPose(x)
  # Wait for the next iteration
  
  
  
  rate.sleep()
 print('ending motion ...')
 fxcurrent.close()
 fxdesired.close()
